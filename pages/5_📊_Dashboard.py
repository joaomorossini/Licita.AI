"""Dashboard page."""

import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from datetime import datetime, timedelta
import numpy as np

# Configure page
st.set_page_config(
    page_title="Dashboard - Licita.AI",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={"Get help": None, "Report a bug": None, "About": None},
)

# Remove top padding and reduce sidebar width
st.markdown(
    """
    <style>
        .block-container {
            padding-top: 1.5rem;
            padding-bottom: 1.5rem;
        }
        section[data-testid="stSidebar"] {
            width: 18rem !important;
        }
        section[data-testid="stSidebar"] > div {
            width: 18rem;
        }
    </style>
    """,
    unsafe_allow_html=True,
)

st.title("Dashboard üìä")
st.divider()

st.warning("‚ö†Ô∏è Em constru√ß√£o. Este √© um dashboard de exemplo e os dados s√£o fict√≠cios.")

# Sidebar filters
with st.sidebar:
    st.markdown(
        """
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <h1 style="display: flex; align-items: center;">
            Filtros&nbsp<span class="material-icons">filter_alt</span>
        </h1>
        """,
        unsafe_allow_html=True,
    )

    # Time range
    st.subheader("Per√≠odo")
    time_range = st.selectbox(
        "Selecione o per√≠odo",
        [
            "√öltimos 30 dias",
            "√öltimo trimestre",
            "√öltimo semestre",
            "√öltimo ano",
            "Personalizado",
        ],
    )

    if time_range == "Personalizado":
        start_date = st.date_input(
            "De",
            value=datetime.now().date() - timedelta(days=30),
            max_value=datetime.now().date(),
        )
        end_date = st.date_input(
            "At√©",
            value=datetime.now().date(),
            max_value=datetime.now().date(),
        )

    # View type
    st.subheader("Visualiza√ß√£o")
    view_type = st.radio(
        "Tipo de visualiza√ß√£o", ["Geral", "Por Cliente", "Por Tipo", "Por Regi√£o"]
    )

    # Metrics selection
    st.subheader("M√©tricas")
    metrics = st.multiselect(
        "Selecione as m√©tricas",
        [
            "Valor Total",
            "Quantidade de Editais",
            "Taxa de Participa√ß√£o",
            "Taxa de Sucesso",
            "Tempo M√©dio de An√°lise",
        ],
        default=["Valor Total", "Quantidade de Editais"],
    )

    # Comparison
    st.subheader("Compara√ß√£o")
    compare_with = st.multiselect(
        "Comparar com", ["Per√≠odo Anterior", "Meta", "M√©dia do Mercado"], default=[]
    )

    # Apply filters button
    if st.button("Atualizar Dashboard", type="primary", use_container_width=True):
        st.rerun()

# Generate mock data
dates = pd.date_range(start="2023-01-01", end="2023-12-31", freq="D")
values = np.random.normal(1000000, 200000, len(dates))
tenders = np.random.randint(1, 10, len(dates))
df = pd.DataFrame({"Data": dates, "Valor": values, "Quantidade": tenders})

# Monthly aggregation
df_monthly = (
    df.set_index("Data")
    .resample("M")
    .agg({"Valor": "sum", "Quantidade": "sum"})
    .reset_index()
)

# Create mock data for other visualizations
regions = ["Sul", "Sudeste", "Centro-Oeste", "Norte", "Nordeste"]
region_values = np.random.randint(5000000, 50000000, len(regions))
region_quantities = np.random.randint(20, 200, len(regions))

tender_types = ["Obras", "Servi√ßos", "Materiais", "Equipamentos", "Outros"]
type_values = np.random.randint(1000000, 10000000, len(tender_types))

# KPI metrics row
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(
        "Valor Total de Licita√ß√µes",
        f"R$ {df['Valor'].sum()/1e6:.1f}M",
        "12.5%",
        help="Valor total de todas as licita√ß√µes no per√≠odo selecionado",
    )

with col2:
    st.metric(
        "Quantidade de Editais",
        f"{df['Quantidade'].sum()}",
        "-4.2%",
        help="N√∫mero total de editais analisados no per√≠odo",
    )

with col3:
    st.metric(
        "Taxa de Participa√ß√£o",
        "68.5%",
        "8.1%",
        help="Percentual de editais em que houve participa√ß√£o",
    )

with col4:
    st.metric(
        "Taxa de Sucesso",
        "42.3%",
        "15.4%",
        help="Percentual de licita√ß√µes vencidas entre as participadas",
    )

# Charts row 1
col1, col2 = st.columns(2)

with col1:
    st.subheader("Valor Total de Licita√ß√µes por M√™s")
    fig = px.bar(
        df_monthly,
        x="Data",
        y="Valor",
        labels={"Data": "M√™s", "Valor": "Valor Total (R$)"},
        template="plotly_white",
    )
    fig.update_layout(
        height=400,
        hovermode="x unified",
        showlegend=False,
    )
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.subheader("Distribui√ß√£o por Regi√£o")
    fig = px.pie(
        values=region_values,
        names=regions,
        hole=0.4,
        template="plotly_white",
    )
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)

# Charts row 2
col1, col2 = st.columns(2)

with col1:
    st.subheader("Quantidade de Editais por M√™s")
    fig = go.Figure()
    fig.add_trace(
        go.Scatter(
            x=df_monthly["Data"],
            y=df_monthly["Quantidade"],
            mode="lines+markers",
            name="Quantidade",
            line=dict(width=3),
        )
    )
    fig.update_layout(
        height=400,
        template="plotly_white",
        hovermode="x unified",
        showlegend=False,
        yaxis_title="Quantidade de Editais",
        xaxis_title="M√™s",
    )
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.subheader("Valor por Tipo de Licita√ß√£o")
    df_types = pd.DataFrame({"Tipo": tender_types, "Valor": type_values})
    fig = px.bar(
        df_types,
        x="Tipo",
        y="Valor",
        labels={"Valor": "Valor Total (R$)"},
        template="plotly_white",
    )
    fig.update_layout(height=400, showlegend=False)
    st.plotly_chart(fig, use_container_width=True)

# Data table
st.subheader("√öltimas Licita√ß√µes")
df_table = pd.DataFrame(
    {
        "Data": pd.date_range(end=datetime.now(), periods=5, freq="D"),
        "√ìrg√£o": [
            "Prefeitura de S√£o Paulo",
            "Governo do Estado RS",
            "Minist√©rio da Sa√∫de",
            "Prefeitura de Curitiba",
            "DNIT",
        ],
        "Objeto": [
            "Constru√ß√£o de Hospital",
            "Fornecimento de Medicamentos",
            "Servi√ßos de Limpeza",
            "Manuten√ß√£o de Escolas",
            "Pavimenta√ß√£o de Rodovia",
        ],
        "Valor Estimado": np.random.randint(100000, 5000000, 5),
        "Status": [
            "Em An√°lise",
            "Participando",
            "Vencida",
            "Em An√°lise",
            "N√£o Participar",
        ],
    }
)

st.dataframe(
    df_table.style.format({"Valor Estimado": "R$ {:,.2f}"}),
    hide_index=True,
    use_container_width=True,
)
